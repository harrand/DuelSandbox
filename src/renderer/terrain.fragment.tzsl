shader(type = fragment);

import <math>

output(id = 0) vec4 output_colour;
// vertex_height somewhere between 0.0 and 1.0.
input(id = 0) float vertex_height;

// Base colour of terrain.
const vec3 terrain_colour = vec3(0.65f, 0.4f, 0.25f);
// Base colour of fluid.
const vec3 fluid_colour = vec3(0.0f, 0.765f, 1.0f);
// Base colour of deep fluid.
const vec3 deep_fluid_colour = vec3(0.0f, 0.3f, 0.7f);
// Colour of inner froth of fluid.
const vec3 fluid_froth_colour = vec3(1.0f, 1.0f, 1.0f);
// Colour of outer froth of fluid.
const vec3 fluid_outer_froth_colour = vec3(1.0f, 1.0f, 1.0f);
// Base colour of tip of terrain.
const vec3 tip_colour = vec3(0.26f, 0.524f, 0.0f);

const vec2 froth_region = vec2(0.0f, 0.2f);
const float outer_froth_width = 0.02f;

vec3 get_colour(float height)
{
	if(height > 0.0f)
	{
		return tz::math::lerp(terrain_colour, tip_colour, (tz::math::pow(height, 3)) * 2.6f + 0.4f);
	}
	float ah = tz::math::abs(height);
	if(ah > froth_region.x && ah < froth_region.y)
	{
		// We mix between froth and fluid colour.
		return tz::math::lerp(fluid_froth_colour, fluid_colour, ah / froth_region.y);
	}
	if(ah < (froth_region.y + outer_froth_width))
	{
		return fluid_outer_froth_colour;
	}
	float fluid_depth = froth_region.y + outer_froth_width;
	return tz::math::lerp(fluid_colour, deep_fluid_colour, ah - fluid_depth);

	return vec3(0.0);
}

void main()
{
	vec3 sampled_colour = get_colour(vertex_height);
	const float LOG2 = 1.442695;
	float z = gl_FragCoord.z / gl_FragCoord.w;
	const vec3 fog_colour = vec3(0.76f, 0.835f, 0.855f);
	const float fog_density = 0.003f;
	float fogFactor = exp2( -fog_density * 
					fog_density * 
					z * 
					z * 
					LOG2 );
	fogFactor = clamp(fogFactor, 0.0, 1.0);

	output_colour = vec4(mix(fog_colour, sampled_colour, fogFactor ), 1.0f);	
}
